{"ast":null,"code":"var _jsxFileName = \"/Users/joeyregister/Documents/Garden-Guru/client/src/pages/Search/Search.js\";\nimport React, { useState, useEffect } from 'react';\nimport Searchform from '../../components/searchForm/searchForm';\nimport SearchResults from '../../components/Search/index';\nimport SucculentPhoto from '../../components/SucculentPhoto';\nimport { Row } from '../../components/Grid';\n\nfunction Search() {\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const [error, setError] = useState(\"\"); // When the component mounts, update the title to be Wikipedia Searcher\n\n  useEffect(() => {\n    if (!term) {\n      return;\n    }\n\n    setSearch(\"\");\n    console.log(search);\n    const key = \"dFJuTGR0eWxpTTR5N2xXVTczWlMvZz09\";\n    const APIurl = \"https://cors-anywhere.herokuapp.com/https://trefle.io/api/species/?q=\" + term + \"&token=\" + key;\n    fetch(APIurl, {\n      crossOrigin: true,\n      origin: \"http://localhost:3000\"\n    }).then(res => {\n      res.json().then(resp => {\n        if (resp.length === 0) {\n          throw new Error(\"No results found.\");\n        }\n\n        if (resp.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n\n        let plantArr = resp;\n        setResults(plantArr);\n      }).catch(err => {\n        throw err;\n      });\n    }, [results]).catch(err => setError(err));\n    setTerm(\"\");\n    console.log(term);\n    console.log(search);\n  });\n\n  const clearForm = () => {\n    setSearch(\"\");\n  };\n\n  const handleInputChange = event => {\n    setSearch(event.target.value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    setTerm(search);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SucculentPhoto, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Searchform, {\n    handleFormSubmit: handleFormSubmit,\n    handleInputChange: handleInputChange,\n    term: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SearchResults, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  })));\n}\n\n;\nexport default Search;","map":{"version":3,"sources":["/Users/joeyregister/Documents/Garden-Guru/client/src/pages/Search/Search.js"],"names":["React","useState","useEffect","Searchform","SearchResults","SucculentPhoto","Row","Search","search","setSearch","results","setResults","term","setTerm","error","setError","console","log","key","APIurl","fetch","crossOrigin","origin","then","res","json","resp","length","Error","status","data","message","plantArr","catch","err","clearForm","handleInputChange","event","target","value","handleFormSubmit","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Searchform from '../../components/searchForm/searchForm'\nimport SearchResults from '../../components/Search/index';\nimport SucculentPhoto from '../../components/SucculentPhoto'\nimport { Row } from '../../components/Grid';\n\n    function Search() {\n        const [search, setSearch] = useState(\"\");\n        const [results, setResults] = useState([]);\n        const [term, setTerm] = useState(\"\")\n        const [error, setError] = useState(\"\");\n      \n        // When the component mounts, update the title to be Wikipedia Searcher\n        useEffect(() => {\n\n\n          if (!term) {\n            return;\n          }\n                      \n          setSearch(\"\")\n          console.log(search)\n          const key = \"dFJuTGR0eWxpTTR5N2xXVTczWlMvZz09\"\n          const APIurl = \"https://cors-anywhere.herokuapp.com/https://trefle.io/api/species/?q=\"+term+\"&token=\"+key\n          \n          fetch(APIurl,{crossOrigin: true, origin: \"http://localhost:3000\"})\n            .then(res => {\n              res.json()\n                .then(resp=>{\n                  if (resp.length === 0) {\n                  throw new Error(\"No results found.\");\n                  }\n                  if (resp.status === \"error\") {\n                  throw new Error(res.data.message);\n                  }\n                  let plantArr = resp\n                  setResults(plantArr)\n\n                  \n                  \n                  \n              }).catch(err=>{throw err})\n        }, [results])\n        .catch(err => setError(err));\n\n        setTerm(\"\")\n\n        console.log(term)\n        console.log(search)\n\n        });\n      \n        const clearForm = () =>{\n          setSearch(\"\")\n        }\n        const handleInputChange = event => {\n            setSearch(event.target.value); \n        };\n\n        const handleFormSubmit = event => {\n          event.preventDefault();\n          setTerm(search)\n        };\n\n\n        return (\n          <div>\n            <Row>\n              <SucculentPhoto/>\n              <Searchform\n                handleFormSubmit={handleFormSubmit}\n                handleInputChange={handleInputChange}\n                term={search}\n                />\n              <SearchResults results={results} />\n            </Row>\n          </div>\n        )};\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}